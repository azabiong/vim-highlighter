*Highlighter.txt*  vim-highlighter
                                                                             ~
                                                                             ~
            |   |_)       |     |_)       |     |                            ~
            |   | |  _` | __ \  | |  _` | __ \  __|  _ \  __|                ~
            ___ | | (   | | | | | | (   | | | | |    __/ |                   ~
           _|  _|_|\__, |_| |_|_|_|\__, |_| |_|\__|\___|_|                   ~
                    |___/           |___/                                    ~
                                                                             ~
                Highlight words with configurable colors                     ~
                                                                             ~
                    Azabiong <azabiongc@gmail.com>                           ~
                            Licence: MIT                                     ~
                                                                             ~
------------------------------------------------------------------------------
CONTENTS                                                        *Highlighter*
                                                                 `ver 1.19`
         Introduction`...........................`|Hi-Introduction|
         Key Map`.....................................`|Hi-Key-Map|
         One Time Highlight`...............`|Hi-One-Time-Highlight|
         Following Highlight`.............`|Hi-Following-Highlight|
         Find in files Highlight`.....`|Hi-Find-In-Files-Highlight|
         Customizing Colors`...............`|Hi-Customizing-Colors|
         Commands`...................................`|Hi-Commands|
         Options`.....................................`|Hi-Options|
         Reference`.................................`|Hi-Reference|
         Issues`.......................................`|Hi-Issues|
         Log`.............................................`|Hi-Log|

------------------------------------------------------------------------------
INTRODUCTION                                                  *Hi-Introduction*

One of the things that are not easy for people, but an easy thing for computers
would be finding symbols very quickly. This plugin provides an easy way to use
Vim's highlighting function which helps quickly find the usage of words and
easily check spelling of variables.

------------------------------------------------------------------------------
KEY-MAP                           *HiSet*  *HiErase*  *HiClear*  *HiFind*  *Hi-Key-Map*

The plugin uses some key mappings which you can assign in the configuration
file.
>
    let HiSet   = 'f<CR>'           " normal, visual
    let HiErase = 'f<BS>'           " normal, visual
    let HiClear = 'f<C-L>'          " normal
    let HiFind  = 'f<Tab>'          " normal, visual
<
    The default key mappings are: `f Enter`, `f Backspace`, `f Ctrl+L` and `f Tab`

In normal mode, `HiSet` and `HiErase` keys set or erase highlights of the word
under the cursor. `HiClear` key clears all highlights.

In visual mode, the highlight is selected as a pattern from the selection, and
applied to other words. To reselect the pattern, |gv| command would be helpful.
You can also select the entire line and highlight it.

`HiFind` key is the shortcut for `FIND IN FILES HIGHLIGHT`

------------------------------------------------------------------------------
ONE TIME HIGHLIGHT                                      *Hi-One-Time-Highlight*

The plugin provides an automatic feature that erases highlights after using.
It would be useful when just one time quick scanning is needed at the cursor
position.

When the cursor is over a word that is not highlighted, pressing `HiErase` key
sets `ONE TIME HIGHLIGHT`, The highlight stays on while the cursor is not moving,
and then automatically turns off after the cursor moves.

`ONE TIME HIGHLIGHT` shows all matching symbols in the current tab.

------------------------------------------------------------------------------
FOLLOWING HIGHLIGHT                                    *Hi-Following-Highlight*

When you need automatic matching based on cursor movement, `FOLLOWING HIGHLIGHT`
mode can be useful.

Pressing `HiSet` key over `ONE TIME HIGHLIGHT` without moving the cursor sets
`FOLLOWING HIGHLIGHT` mode. The highlight follows the cursor. Pressing `HiErase`
key turns off the mode.

Matching option ~

    Sometimes |<cWORD>| matching option of **Vim** can be useful to quickly
    compare variables consisting of characters and symbols. For example:
>
        object.method         directory/file.ext
        item[index]           https://www.vim.org
        function(param)       AB:12:CD:34:EF:56
        property:'value'      --long-option
        attribute="value"
<
    The following command toggles between |<cword>| and |<cWORD>| options.
>
        :Hi <>
<
keywords~

    For better visual representation, `FOLLOWING HIGHLIGHT` skips moving on
    well-known keywords defined in the `vim-highlighter/autoload/keywords`
    directory.
    If needed, you can store more keywords in the `vim-highlighter/keywords`
    directory. The keywords are separated by spaces, and can be saved as a
    plain text file using the 'filetype' as the filename.

    You can also add additional search tool's options to this directory.

------------------------------------------------------------------------------
FIND IN FILES HIGHLIGHT                            *Hi-Find-In-Files-Highlight*

If you have installed hi-performance search tools such as 'ag', 'rg', 'ack',
'sift' or 'grep', the plugin can run it when looking for symbols based on the
current directory. And when the given expression is simple, the plugin can
highlight patterns to make them easier to find.

1.Search tool ~

    If one of the tools listed above is found in the `$PATH`, the plugin can run
    it using default options. You can set your preferred tool and options in
    the |HiFindTool| variable. For example:
>
        let HiFindTool = 'grep -EnrI --exclude-dir=.git'
<
    Please refer to the |HiFindTool| section for more options.

2.Input ~

    |HiFind| key brings up `Find` command prompt.
    You can use general order of passing arguments to search tools:
>
        Find  [options]  expression  [directories_or_files]
<
3.Expression ~

    Among various regular expression options in Vim, the plugin uses "very magic"
    style syntax which uses the standard regex syntax with fewer escape sequences.

  Example~
    * searching for "red" or "blue":
>
        Find  red|blue
<
    * pattern with spaces:
>
        Find  "pattern with spaces"
     or
        Find   pattern\ with\ spaces
<
    * color codes such as: #e3d3b7, #AFD9D9
>
        Find  -i  #[A-F0-9]{6}
<
    * class types or variables that start with a capital letter A or S:
      Array, Set, String, Symbol
>
        Find  \b[AS]\w+
<
    * strings that looks like a URL:
>
        Find  https?://[^"'\ ()]+
<
4.Options ~

  -F --fixed-strings  or -Q --literal  option ~
    This option treats the input as a literal string, which is useful when
    searching for codes with symbols
>
        ag,  rg,  grep  -F --fixed-strings
        ack, sift       -Q --literal
<
    Example: searching for `item[i+1].size() * 2`
>
        Find  -F  'item[i+1].size() * 2'
<
  --smart-case option ~
    When this option is set to default, you can use option -s or -I to
    run a case-sensitive search:
>
        ag,  rg         -s --case-sensitive
        ack, sift       -I --no-ignore-case
<
  Visual selection ~
    When searching for part of a string in the file as is, using visual
    selection would be useful. After selecting the part, press |HiFind| key.
    The plugin will escape the pattern properly.

5.Navigation ~

    After a search, it will be handy to use keyboard shortcuts to the following
    commands to easily navigate the results.

    |Hi/next| and |Hi/previous| commands jump to the file.

    |Hi/older| and |Hi/newer| commands navigate the search history.

    Key-mapping example:  `-` `_`  `f<Left>` `f<Right>`
>
        :nn <silent>-  :Hi/next<CR>
        :nn <silent>_  :Hi/previous<CR>
        :nn f<Left>    :Hi/older<CR>
        :nn f<Right>   :Hi/newer<CR>
<
6.Find window ~

    The following keys and functions are available in the Find window.

     CTRL-C   Stop searching
       r      Rotate Find window
       s      Split and Jump to file
    <Enter>   Jump to file

------------------------------------------------------------------------------
CUSTOMIZING COLORS                                      *Hi-Customizing-Colors*

The plugin provides 14 + 3 default colors.
>
    HiColor1, HiColor2, HiColor3, ... HiColor14
    HiFollow, HiOneTime, HiFind
<
You can add, change, reorder, and save colors using Vim's native |:hi| command,
and see the changes in real time.

  Example 1 ~

    The following command adds two custom colors numbered 21 and 22.
>
    :hi HiColor21 ctermfg=20  ctermbg=159 guifg=#0000df guibg=#afffff
    :hi HiColor22 ctermfg=228 ctermbg=129 guifg=#ffff87 guibg=#af00ff
<
    Now move the cursor to any word, then input the number `21` and `HiSet` key.
    Does it work? If you press `HiSet` key again, the next color will be set.
    You can try some other values to change the color, and see the result
    instantly. You can use this format to save colors in the configuration
    file.

The highlighting colors are selected in sequence and can be picked with the
number. If the next color is not defined, the first one is selected.

`HiOneTime` is the color of `ONE TIME HIGHLIGHT`
`HiFollow`  is the color of `FOLLOWING HIGHLIGHT`
`HiFind`    is the color of `FIND IN FILES HIGHLIGHT`

  Example 2 ~

    The following command changes the color of `FIND IN FILES HIGHLIGHT`
>
    :hi HiFind ctermfg=52 ctermbg=182 guifg=#570707 guibg=#e7bfe7
<
------------------------------------------------------------------------------
COMMANDS                                                *:HI*  *:Hi*  *Hi-Commands*

Highlighting functions can be invoked using |:Hi| command.
                                                                          *Hi+*
:Hi + ~
:Hi +x ~
    `HiSet` key function in normal mode (+), visual mode (+x)
    Set highlight of the word under the cursor

:Hi - ~
:Hi -x ~
    `HiErase` key function in normal mode (-), visual mode (-x)
    Erase highlight of the word or pattern, or set `ONE TIME HIGHLIGHT`

:Hi >> ~
    Set `FOLLOWING HIGHLIGHT` mode
                                                                         *Hi<>*
:Hi <>  <cword>  <cWORD> ~
    Set matching mode of `FOLLOWING HIGHLIGHT`
    <> toggles between two options

:Hi clear ~
    `HiClear` key function
    Clear all highlights in the current window
                                                                          *Hi/*
:Hi / ~
:Hi /x ~
    `HiFind` key function of `FIND IN FILES` in normal mode (/), visual mode (/x)
    Invoke `Find` command prompt in normal mode

:Hi default ~
    Load the plugin default colors
                                                                      *Hi/open*
:Hi /open ~
    Open `Find` window
                                                                     *Hi/close*
:Hi /close ~
    Close `Find` window
                                                         *Hi/next*  *Hi/previous*
:Hi /next ~
:Hi /previous ~
    Jump to the next | previous item in the `Find` list
    It will be convenient to use keyboard shortcut to these commands to easily
    navigate the search list. For example, to map '-' and '_' keys in normal
    mode: >
        :nn <silent>-  :Hi/next<CR>
        :nn <silent>_  :Hi/previous<CR>
<                                                           *Hi/older*  *Hi/newer*
:Hi /older ~
:Hi /newer ~
    Go to older | newer `Find` list in history
    It would be also convenient to map these commands somewhere.
    To map `f <Left>` and `f <Right>` keys in normal mode: >

        :nn f<Left>    :Hi/older<CR>
        :nn f<Right>   :Hi/newer<CR>

------------------------------------------------------------------------------
OPTIONS                                                            *Hi-Options*
                                                                    *HiMapKeys*
|HiMapKeys| lets the plugin map keys on loading.

    Default: 1 (enable)
    Values:  0, 1
                                                                *HiOneTimeWait*
|HiOneTimeWait| defines the wait time before turning off the highlights after
    the cursor stopped in `ONE TIME HIGHLIGHT` mode.

    Default: 260 (ms)
     Values: 0 ~ 320
                                                                  *HiFollowWait*
|HiFollowWait| defines the wait time before moving the highlights to the cursor
    position after the cursor stopped in `FOLLOWING HIGHLIGHT` mode.

    Default: 320 (ms)
    Values:  260 ~ 520
                                                                    *HiFindTool*
|HiFindTool| In this variable, you can set your preferred search tool and options
    to run when using `FIND IN FILES` function. For example,
    "ag": >
          let HiFindTool = 'ag --nocolor --noheading --column --nobreak'
<    "rg": >
          let HiFindTool = 'rg --color=never --no-heading --column --smart-case'
<    "ack": >
          let HiFindTool = 'ack --nocolor --noheading --column --smart-case'
<    "sift:" >
          let HiFindTool = 'sift --no-color --line-number --column --binary-skip --git --smart-case'
<    "ggrep": >
          let HiFindTool = 'ggrep -EnrI --exclude-dir=.git'
<    "git grep": >
          let HiFindTool = 'git grep -EnrI --no-color --column'
<                                                                 *HiFindHistory*
|HiFindHistory| specifies the number of most recently used `FIND IN FILES` lists to
    keep in memory. You can use |Hi/older| and |Hi/newer| commands to navigate
    the list.

    Default: 5
    Values:  2 ~ 10

STATUS VARIABLES ~
                                                                   *HiFindLines*
|HiFindLines|  `read-only`
    This variable represents the number of lines found as a result of `FIND`
    `IN FILES` operation. You can use this variable to check if an item exists.

------------------------------------------------------------------------------
REFERENCE                                                         *Hi-Reference*

    This tool would be helpful when editing colors.

    `xterm-color-table.vim` (https://github.com/guns/xterm-color-table.vim)

------------------------------------------------------------------------------
ISSUES                                                               *Hi-Issues*

Please feel free to open an issue if you have any problems that need fixing
or comments or new features you would like to add.


------------------------------------------------------------------------------
LOG                                                                     *Hi-Log*

1.19~
    Add "Following Highlight" <cWORD> matching mode
      - extended matching to windows in the current tab
    Adjust "HiFind" match priority
      - added restoring HiFind color on color scheme change
    Add user keywords options for search tools
1.18~
    Support multiple -e --regexp option
      - fixed empty expression input
      - added git-grep options
    Highlight a single line using visual selection
1.17~
    Improve "Find in Files Highlight" input handling
      - added --fixed-strings  --literal option
      - read more tools options
1.16~
    Add "Find in Files Highlight" --smart-case option
1.15~
    Add "Find in Files Highlight"
      - "very magic" style regex syntax
      - asynchronous search
      - airline compatible
    Improve "One Time Highlight" to show all matches in the current tab
    Improve erasing highlight using visual selection
1.14~
    Improve highlight on the hlsearch
1.13~
    Add "Following Highlight" default keywords
1.1~
    Upgrade "Following Highlight" with well-known keywords.
    Fix buffer switching error
1.0~
    First Release

------------------------------------------------------------------------------
Vim:tw=80:ts=4:ft=help:nowrap:norl
