*Highlighter.txt*  vim-highlighter
                                                                             ~
                                                                             ~
             |   |_)       |     |_)       |     |                           ~
             |   | |  _` | __ \  | |  _` | __ \  __|  _ \  __|               ~
             ___ | | (   | | | | | | (   | | | | |    __/ |                  ~
            _|  _|_|\__, |_| |_|_|_|\__, |_| |_|\__|\___|_|                  ~
                     |___/           |___/                                   ~
                                                                             ~
                     Azabiong <azabiongc@gmail.com>                          ~
                             Licence: MIT                                    ~
                                                                             ~
------------------------------------------------------------------------------
CONTENTS                                                          *Highlighter*
                                                                   `ver 1.26`
          Introduction`...........................`|Hi-Introduction|
          Key Map`.....................................`|Hi-Key-Map|
          One Time Highlight`...............`|Hi-One-Time-Highlight|
          Following Highlight`.............`|Hi-Following-Highlight|
          Find in Files Highlight`.....`|Hi-Find-In-Files-Highlight|
          Sync Mode`.................................`|Hi-Sync-Mode|
          Save & Load`...............................`|Hi-Save-Load|
          Customizing Colors`...............`|Hi-Customizing-Colors|
          Reference`.................................`|Hi-Reference|
          Commands`...................................`|Hi-Commands|
          Options`.....................................`|Hi-Options|
          Issues`.......................................`|Hi-Issues|
          Log`.............................................`|Hi-Log|

------------------------------------------------------------------------------
INTRODUCTION                                                   *Hi-Introduction*

One of the things that are not easy for people, but an easy thing for computers
would be finding symbols very quickly. This plugin provides an easy way to use
Vim's highlighting function which helps you quickly find variables and easily
compare spellings.

------------------------------------------------------------------------------
KEY-MAP                            *HiSet*  *HiErase*  *HiClear*  *HiFind*  *Hi-Key-Map*

The plugin uses several key mappings which you can assign in the configuration
file.
>
    let HiSet   = 'f<CR>'           " normal, visual
    let HiErase = 'f<BS>'           " normal, visual
    let HiClear = 'f<C-L>'          " normal
    let HiFind  = 'f<Tab>'          " normal, visual
<
    The default key mappings are: `f Enter`, `f Backspace`, `f Ctrl+L` and `f Tab`

In normal mode, `HiSet` and `HiErase` keys set or erase highlights of the word
under the cursor. `HiClear` key clears all highlights.

In visual mode, the highlight is selected as a pattern from the selection, and
applied to other words. To select the same pattern again, |gv| command would be
useful. You can also select the entire line and highlight it.

`HiFind` key is the shortcut for `FIND IN FILES HIGHLIGHT`

------------------------------------------------------------------------------
ONE TIME HIGHLIGHT                                       *Hi-One-Time-Highlight*

The plugin provides an automatic feature that erases highlights after using.
It would be useful when just one time quick scanning is needed at the cursor
position.

When the cursor is over a word that is not highlighted, pressing `HiErase` key
sets `ONE TIME HIGHLIGHT`, The highlight stays on while the cursor is not moving,
and automatically turns off after the cursor moves.

`ONE TIME HIGHLIGHT` shows all matching symbols in the current tab.

------------------------------------------------------------------------------
FOLLOWING HIGHLIGHT                                     *Hi-Following-Highlight*

When you need automatic matching based on cursor movement, `FOLLOWING HIGHLIGHT`
mode can be useful.

Pressing `HiSet` key over `ONE TIME HIGHLIGHT` without moving the cursor sets
`FOLLOWING HIGHLIGHT` mode. The highlight follows the cursor. Pressing `HiErase`
key turns off the mode.

Matching mode ~

    Sometimes |<cWORD>| matching option of **Vim** can be useful to quickly
    compare variables consisting of characters and symbols. The following
    command toggles between |<cWORD>| and the default |<cword>| matching option:
>
      :Hi <>
<
    |<cWORD>| matching example:
>
        object.method      property:'value'      https://www.vim.org
        item[index]        attribute="value"     AB:12:CD:34:EF:56
        function(param)    directory/file.ext    --long-option
<
Highlighting is applied to all windows in the current tab-page for easy comparison.

------------------------------------------------------------------------------
FIND IN FILES HIGHLIGHT                             *Hi-Find-In-Files-Highlight*

If you have installed hi-performance search tools such as 'ag', 'rg', 'ack',
'sift' or 'grep', the plugin can run it when looking for symbols based on the
current directory. And when the given expression is simple, the plugin can
highlight patterns to make them easier to find.

1.Search tool ~

    If one of the tools listed above is found in the `$PATH`, the plugin can run
    it using default options. You can set your preferred tool and options in
    the |HiFindTool| variable. For example:
>
        let HiFindTool = 'grep -EnrI --exclude-dir=.git'
<
    Please refer to the |HiFindTool| section for more options.

2.Input ~

    |HiFind| key brings up `Find` command prompt.
    You can use general order of passing arguments to search tools:
>
        Find  [options]  expression  [directories_or_files]
<
3.Expression ~

    Among various regular expression options in Vim, the plugin uses "very magic"
    style syntax which uses the standard regex syntax with fewer escape sequences.

  Example~
    * searching for "red" or "blue":
>
        Find  red|blue
<
    * pattern with spaces:
>
        Find  "pattern with spaces"
     or
        Find   pattern\ with\ spaces
<
    * color codes such as: #e3d3b7, #AFD9D9
>
        Find  -i  #[A-F0-9]{6}
<
    * class types or variables that start with a capital letter A or S:
      Array, Set, String, Symbol
>
        Find  \b[AS]\w+
<
    * strings that looks like a URL:
>
        Find  https?://[^"'\ ()]+
<
4.Options ~

  -F --fixed-strings  or -Q --literal  option ~
    This option treats the input as a literal string, which is useful when
    searching for codes with symbols.
>
        ag,  rg,  grep  -F --fixed-strings
        ack, sift       -Q --literal
<
    Example: searching for `item[i+1].size() * 2`
>
        Find  -F  'item[i+1].size() * 2'
<
  --smart-case option ~
    When this option is set to default, you can use option -s or -I to
    run a case-sensitive search:
>
        ag,  rg         -s --case-sensitive
        ack, sift       -I --no-ignore-case
<
  Visual selection ~
    When searching for part of a string in the file as is, using visual
    selection would be useful. After selecting the part, press |HiFind| key.
    The plugin will escape the pattern properly.

5.Navigation ~

    After a search, it will be handy to use keyboard shortcuts to the following
    commands to easily navigate the results.

    |Hi/next| and |Hi/previous| commands jump to the file.

    |Hi/older| and |Hi/newer| commands navigate the search history.

    Key-mapping example:  `-` `_`  `f<Left>` `f<Right>`
>
      :nn <silent>-  :<C-U> Hi/next<CR>
      :nn <silent>_  :<C-U> Hi/previous<CR>
      :nn f<Left>    :<C-U> Hi/older<CR>
      :nn f<Right>   :<C-U> Hi/newer<CR>
<
6.Find window ~

    The following keys and functions are available in the Find window.

     CTRL-C   Stop searching
       r      Rotate Find window
       s      Split and Jump to file
    <Enter>   Jump to file

------------------------------------------------------------------------------
SYNC MODE                                                         *Hi-Sync-Mode*

You can synchronize highlighting of the current window with other windows with
the command: >

    :Hi ==
<
and switch back to default single window highlighting mode using: >

    :Hi =
<
`SYNC MODE` applies to all windows in the current |tab-page|, and can be set
differently for each |tab-page|.

------------------------------------------------------------------------------
SAVE AND LOAD                                                     *Hi-Save-Load*

Sometimes when you want to save highlights and reload them next time, |Hi:save|
and |Hi:load| commands can be useful: >

    :Hi save
<
When loading: >

    :Hi load
<
Highlights of the current window are saved in the user configurable |HiKeywords|
directory. You can also name the file when saving, and use tab-completion
when loading. >

    :Hi save mark2
    :Hi load <Tab>
<
To browse and manage the list of highlight files, you can use |Hi:ls| command
to open |netrw|.
>
    :Hi ls
<
------------------------------------------------------------------------------
CUSTOMIZING COLORS                                       *Hi-Customizing-Colors*

The plugin provides 14 + 3 default colors.
>
    HiColor1, HiColor2, HiColor3, ... HiColor14
    HiFollow, HiOneTime, HiFind
<
You can add, change, reorder, and save colors using Vim's native |:hi| command,
and see the changes in real time.

Example 1 ~

    The following command adds two custom colors numbered 21 and 22.
>
      :hi HiColor21 ctermfg=20  ctermbg=159 guifg=#0000df guibg=#afffff
      :hi HiColor22 ctermfg=228 ctermbg=129 guifg=#ffff87 guibg=#af00ff
<
    Now move the cursor to any word, and then input the number `21` and `HiSet`
    key. Does it work? If you press `HiSet` key again, the next color will be set.
    You can try different values to change the color, and see the result
    instantly. You can store colors in the configuration file using this format.

The highlighting colors are selected in order, or can be picked with the number.
If the next color is not defined, the first one is selected.

`HiOneTime` is the color of `ONE TIME HIGHLIGHT`
`HiFollow`  is the color of `FOLLOWING HIGHLIGHT`
`HiFind`    is the color of `FIND IN FILES HIGHLIGHT`

Example 2 ~

    The following command changes the color of `FIND IN FILES HIGHLIGHT`
>
      :hi HiFind ctermfg=52 ctermbg=182 guifg=#570707 guibg=#e7bfe7
<
------------------------------------------------------------------------------
COMMANDS                                                 *:Hi*  *:HI*  *Hi-Commands*

Highlighter commands start with `Hi` or `HI`, and are combined with the following
commands using optional spaces.

1.Commands without default key mappings ~

 :Hi ~
    Print plugin version
                                                                         *:Hi==*
 :Hi == ~
    Synchronize highlighting of all windows in the current |tab-page|
                                                                          *:Hi=*
 :Hi = ~
    Switch back to default single window highlighting mode
                                                                         *:Hi=!*
 :Hi =!~
    Toggle `SYNC MODE` of the current |tab-page|
                                                 *:Hi<>*  *:Hi<cword>*  *:Hi<cWORD>*
 :Hi <>  <cword>  <cWORD> ~
    Set word matching mode in `FOLLOWING HIGHLIGHT`
    <>  toggle between two modes
                                                        *:Hi/next*  *:Hi/previous*
 :Hi /next ~
 :Hi /previous ~
    Jump to the next | previous item in the `Find` list
    It will be convenient to use shortcut keys to these commands to easily
    navigate the search list. For example, to map '-' and '_' keys in normal
    mode: >
      :nn <silent>-  :<C-U> Hi/next<CR>
      :nn <silent>_  :<C-U> Hi/previous<CR>
<                                                          *:Hi/older*  *:Hi/newer*
 :Hi /older ~
 :Hi /newer ~
    Go to older | newer `Find` list in history
    It would also be convenient to map these commands somewhere.
    To map `f <Left>` and `f <Right>` keys in normal mode:
>
      :nn f<Left>    :<C-U> Hi/older<CR>
      :nn f<Right>   :<C-U> Hi/newer<CR>
<                                                           *:Hi/open*  *:Hi/close*
 :Hi /open ~
 :Hi /close ~
    Open | Close `Find` window
                                                                         *:Hi//*
 :Hi // ~
    Clear highlights of the `Find` result
                                                                   *:Hi:default*
 :Hi :default ~
    Load the plugin default colors
                                                            *:Hi:save*  *:Hi:load*
 :Hi :save  :load  :Load ~
    Save | Load highlights of the current window in the user configurable
    |HiKeywords| directory
    You can use optional filename and tab-completion when saving and loading.
>
      :Hi save todo3
      :Hi load <Tab>
<                                                                        *:Hi:ls*
 :Hi :ls ~
    Open |netrw| to browse and manage the list of highlights files

2.Commands with default key mappings ~
                                                                          *:Hi+*
 :Hi + ~
 :Hi +x ~
    `HiSet` key function in normal mode (+), visual mode (+x)
    Set highlight of the word under the cursor
                                                                          *:Hi-*
 :Hi - ~
 :Hi -x ~
    `HiErase` key function in normal mode (-), visual mode (-x)
    Erase highlight of the word or pattern, or set `ONE TIME HIGHLIGHT`

 :Hi >> ~
    Set `FOLLOWING HIGHLIGHT` mode
                                                                     *:Hi:clear*
 :Hi :clear ~
    `HiClear` key function
    Clear all highlights in the current window
                                                                          *:Hi/*
 :Hi / ~
 :Hi /x ~
    `HiFind` key function of `FIND IN FILES` in normal mode (/), visual mode (/x)
    Brings up `Find` command prompt.

------------------------------------------------------------------------------
OPTIONS                                                            *Hi-Options*
                                                                    *HiMapKeys*
|HiMapKeys| lets the plugin map keys on loading.

    Default: 1 (enable)
    Values:  0, 1
                                                                    *HiFindTool*
|HiFindTool| In this variable, you can set your preferred search tool and options
    to run when using `FIND IN FILES` function. For example,
    "grep": >
          let HiFindTool = 'grep -EnrI --exclude-dir=.git'
<    "ag": >
          let HiFindTool = 'ag --nocolor --noheading --column --nobreak'
<    "rg": >
          let HiFindTool = 'rg --color=never --no-heading --column --smart-case'
<    "ack": >
          let HiFindTool = 'ack --nocolor --noheading --column --smart-case'
<    "sift:" >
          let HiFindTool = 'sift --no-color --line-number --column --binary-skip --git --smart-case'
<    "ggrep": >
          let HiFindTool = 'ggrep -EnrI --exclude-dir=.git'
<    "git grep": >
          let HiFindTool = 'git grep -EnI --no-color --column'
<                                                                 *HiFindHistory*
|HiFindHistory| specifies the number of most recently used `FIND IN FILES` lists to
    keep in memory. You can use |Hi/older| and |Hi/newer| commands to navigate
    the list.

    Default: 5
    Values:  2 ~ 10
                                                                 *HiOneTimeWait*
|HiOneTimeWait| defines the wait time before turning off the highlights after
    the cursor stopped in `ONE TIME HIGHLIGHT` mode.

    Default: 260 (ms)
     Values: 0 ~ 320
                                                                  *HiFollowWait*
|HiFollowWait| defines the wait time before moving the highlights to the cursor
    position after the cursor stopped in `FOLLOWING HIGHLIGHT` mode.

    Default: 320 (ms)
    Values:  260 ~ 520
                                                                    *HiKeywords*
|HiKeywords| specifies a directory where current highlights, optional keywords
    for `FOLLOWING HIGHLIGHT` can be stored. The default setting is:
>
        let HiKeywords = '$HOME/.vim/after/vim-highlighter'
<
    The |Hi:ls| command opens |netrw| to browse the directory.

    For better visual representation, `FOLLOWING HIGHLIGHT` skips focusing on
    frequently used keywords defined in the `vim-highlighter/autoload/keywords`
    directory. If needed, you can add additional keywords files using the
    'filetype' as the filename. The keywords are separated by spaces, and
    can be saved as a plain text file.

    Additional search tool options for `FIND IN FILES` function can also be
    stored in the directory.

STATUS VARIABLES ~
                                                                   *HiFindLines*
|HiFindLines|  `read-only`
    This variable represents the number of lines found as a result of `FIND`
    `IN FILES` operation, which can be used to check if an item exists.

------------------------------------------------------------------------------
REFERENCE                                                         *Hi-Reference*

    This tool would be helpful when editing colors.

    `xterm-color-table.vim` (https://github.com/guns/xterm-color-table.vim)

------------------------------------------------------------------------------
ISSUES                                                               *Hi-Issues*

If you have any issues that need fixing, comments or new features you would
like to add, please feel free to open an issue.


------------------------------------------------------------------------------
LOG                                                                     *Hi-Log*

1.26~
    Improve "Find in Files Highlight"
      - added "clear highlights" command
      - fixed --smart-case matching
1.25~
    Add commands - save, load highlights
    Improve "Find" window split location
1.24~
    Fix - correct focus switching to the "Find" window
1.23~
    Fix - Jump to File
1.22~
    Improve focus switching to the "Find" window
1.21~
    Improve options
      - fixed "Find" window rotation
      - added "HiKeywords" option for user configurable keywords
      - added "Sync Mode" toggle command
1.20~
    Add "Sync Mode"
    Improve grep output list
1.19~
    Add "Following Highlight" <cWORD> matching mode
      - extended matching to windows in the current tab
    Adjust "HiFind" match priority
      - added restoring HiFind color on color scheme change
    Add user keywords options for search tools
1.18~
    Support multiple -e --regexp option
      - fixed empty expression input
      - added git-grep options
    Highlight a single line using visual selection
1.17~
    Improve "Find in Files Highlight" input handling
      - added --fixed-strings  --literal option
      - read more tools options
1.16~
    Add "Find in Files Highlight" --smart-case option
1.15~
    Add "Find in Files Highlight"
      - "very magic" style regex syntax
      - asynchronous search
      - airline compatible
    Improve "One Time Highlight" to show all matches in the current tab
    Improve erasing highlight using visual selection
1.14~
    Improve highlight on the hlsearch
1.13~
    Add "Following Highlight" default keywords
1.1~
    Upgrade "Following Highlight" with well-known keywords.
    Fix buffer switching error
1.0~
    First Release

------------------------------------------------------------------------------
Vim:tw=80:ts=4:ft=help:nowrap:norl
