*Highlighter.txt*  vim-highlighter
                                                                             ~
                                                                             ~
              |   |_)       |     |_)       |     |                          ~
              |   | |  _` | __ \  | |  _` | __ \  __|  _ \  __|              ~
              ___ | | (   | | | | | | (   | | | | |    __/ |                 ~
             _|  _|_|\__, |_| |_|_|_|\__, |_| |_|\__|\___|_|                 ~
                      |___/           |___/                                  ~
                                                                             ~
                      Azabiong <azabiongc@gmail.com>                         ~
                              Licence: MIT                                   ~
                                                                             ~
------------------------------------------------------------------------------
CONTENTS                                                          *Highlighter*
                                                                   `ver 1.33`
               Introduction             |Hi-Introduction|
               Key Map                  |Hi-Key-Map|
               Sync Mode                |Hi-Sync-Mode|
               Save & Load              |Hi-Save-Load|
               One Time Highlight       |Hi-One-Time-Highlight|
               Following Highlight      |Hi-Following-Highlight|
               Find in Files Highlight  |Hi-Find-In-Files-Highlight|
               Customizing Colors       |Hi-Customizing-Colors|
               Commands                 |Hi-Commands|
               Options                  |Hi-Options|
               Reference                |Hi-Reference|
               Issues                   |Hi-Issues|
               Log                      |Hi-Log|

------------------------------------------------------------------------------
INTRODUCTION                                                   *Hi-Introduction*

Highlighting keywords or lines can be useful when analyzing code, reviewing
summaries, and quickly comparing spellings. This plugin extends Vim's highlighting
capabilities with additional features such as saving and loading highlights,
finding variables, and customizing colors.

------------------------------------------------------------------------------
KEY-MAP                            *HiSet*  *HiErase*  *HiClear*  *HiFind*  *Hi-Key-Map*

The plugin uses the following default key mappings which you can assign in the
configuration file.
>
    let HiSet   = 'f<CR>'           " normal, visual
    let HiErase = 'f<BS>'           " normal, visual
    let HiClear = 'f<C-L>'          " normal
    let HiFind  = 'f<Tab>'          " normal, visual
<
    Default key mappings: `f Enter`, `f Backspace`, `f Ctrl+L` and `f Tab`

In normal mode, `HiSet` and `HiErase` keys set or erase highlights of the word
under the cursor. `HiClear` key clears all highlights.

In visual mode, the highlight is selected as a pattern from the selection and
applied to other words. To select the same pattern again, |gv| command would be
useful. You can also select an entire line and highlight it.

`HiFind` key is the shortcut for `FIND IN FILES HIGHLIGHT`

------------------------------------------------------------------------------
SYNC MODE                                                         *Hi-Sync-Mode*

You can synchronize highlighting of the current window with other split windows
with the command: >

    :Hi ==
<
and switch back to default single window highlighting mode using: >

    :Hi =
<
`SYNC MODE` applies to all windows in the current |tab-page|, and can be set
differently for each |tab-page|.

------------------------------------------------------------------------------
SAVE AND LOAD                                                     *Hi-Save-Load*

Sometimes when you want to save highlights of the current window, and reload
them next time, you can use:
>
    :Hi save
<
and when loading:
>
    :Hi load
<
You can name the file when saving, and use <Tab> completion when loading.
For example:
>
    :Hi save name
    :Hi load <Tab>
<
Highlight files are stored in a user configurable |HiKeywords| directory. To
browse and manage files in the directory, you can open |netrw| using the command:
>
    :Hi ls
<
You can also use relative paths. For example, to save and load a highlight file
in the current directory:
>
    :Hi save ./name
    :Hi load ./<Tab>
<
------------------------------------------------------------------------------
ONE TIME HIGHLIGHT                                       *Hi-One-Time-Highlight*

The plugin has an automatic feature to clear highlights after use. This can be
useful when you only need one quick scan from the cursor position.

When the cursor is over a word or visual selection that is not highlighted,
pressing |HiErase| key sets `ONE TIME HIGHLIGHT`, The highlight stays on while
the cursor is not moving, and automatically turns off after the cursor moves.

`ONE TIME HIGHLIGHT` shows all matching symbols in the current tab.

------------------------------------------------------------------------------
FOLLOWING HIGHLIGHT                                     *Hi-Following-Highlight*

When you need automatic matching based on cursor movement, `FOLLOWING HIGHLIGHT`
mode can be useful.

Pressing |HiSet| key over `ONE TIME HIGHLIGHT` without moving the cursor sets
`FOLLOWING HIGHLIGHT` mode. The highlight follows the cursor. Pressing |HiErase|
key turns off the mode.

Matching option ~

    Sometimes, when comparing variables consisting of letters and symbols,
    Vim's |<cWORD>| matching option can be useful.
>
      object.method      property:'value'      https://www.vim.org
      item[index]        attribute="value"     AB:12:CD:34:EF:56
      function(param)    directory/file.ext    --long-option
<
    The following command toggles between the default |<cword>| and |<cWORD>|
    matching options:
>
      :Hi <>
<
------------------------------------------------------------------------------
FIND IN FILES HIGHLIGHT                             *Hi-Find-In-Files-Highlight*

If you have installed hi-performance search tools such as 'ag', 'rg', 'ack',
'sift' or 'grep', the plugin can run it when looking for symbols based on the
current directory. And when the given expression is simple, the plugin can
highlight patterns to make them easier to find.

1.Search tool ~

    If one of the tools listed above is in the `$PATH`, the plugin can run it
    using default options. You can set your preferred tool and options in the
    |HiFindTool| variable. For example:
>
        let HiFindTool = 'grep -H -EnrI --exclude-dir=.git'
<
    Please refer to the |HiFindTool| section for more options.

2.Input ~

    |HiFind| key brings up `Hi/Find` command prompt.
    You can use general order of passing arguments to search tools:
>
      :Hi/Find  [options]  expression  [directories_or_files]
<
    <Tab> key completion for long options, directory and file names is supported.
  Tip ~
     To enter the current file name, typing `% Tab` would be convenient.

3.Expression ~

    Among various regular expression options in Vim, the plugin uses "very magic"
    style syntax which uses the standard regex syntax with fewer escape sequences.

  Example~
    * searching for "red" or "blue":
>
      :Hi/Find  red|blue
<
    * pattern with spaces:
>
      :Hi/Find  "pattern with spaces"
     or
      :Hi/Find  pattern\ with\ spaces
<
    * color codes such as: #e3d3b7, #AFD9D9
>
      :Hi/Find  -i  #[A-F0-9]{6}
<
    * class types or variables that start with a capital letter A or S:
      Array, Set, String, Symbol...
>
      :Hi/Find  \b[AS]\w+
<
    * strings that looks like a URL:
>
      :Hi/Find  https?://[^"'\ ()]+
<
4.Options ~

  -F --fixed-strings  or -Q --literal  option ~
    This option treats the input as a literal string, which is useful when
    searching for codes with symbols.
>
       ag,  rg,  grep,  git   -F --fixed-strings
       ack, sift              -Q --literal
<
    Example: searching for `item[i+1].size() * 2`
>
      :Hi/Find  -F  'item[i+1].size() * 2'
<
  --smart-case option ~
    When this option is set to the default, you can use option -s or -I to
    run a case-sensitive search:
>
       ag,  rg      -s --case-sensitive
       ack, sift    -I --no-ignore-case
<
5.Visual selection ~

    When searching for parts of a string in a file as is, visual selection
    would be useful. After selecting the part, press |HiFind| key. The plugin
    will escape the pattern properly.

6.Navigation ~

    It will be handy to use keyboard shortcuts to the following
    commands to easily navigate the search results.

    |Hi/next| and |Hi/previous| commands jump to the file.

    |Hi/older| and |Hi/newer| commands navigate the search history.

    Key-mapping example:  `-` `_`  `f<Left>` `f<Right>`
>
      :nn <silent>-  :<C-U> Hi/next<CR>
      :nn <silent>_  :<C-U> Hi/previous<CR>
      :nn f<Left>    :<C-U> Hi/older<CR>
      :nn f<Right>   :<C-U> Hi/newer<CR>
<  Tip ~
    Pressing the number '1' before the |Hi/next| command invokes a special
    function that jumps to the first item in the search results. For example,
    in the mapping above, entering `1-` will jump to the first item.

7.Find window ~

    The following keys and functions are available in the Find window.

     CTRL-C   Stop searching
       r      Rotate Find window
       s      Split and Jump to file
    <Enter>   Jump to file

Windows Unicode ~

    The following option may be useful for correctly displaying Unicode
    characters output.
>
      :set encoding=utf-8
<
------------------------------------------------------------------------------
CUSTOMIZING COLORS                                       *Hi-Customizing-Colors*

The plugin provides 14 + 3 default colors.
>
    HiColor1, HiColor2, HiColor3, ... HiColor14
    HiFollow, HiOneTime, HiFind
<
You can add, change, reorder, and save colors using Vim's native |:hi| command,
and see the changes in real time.

Example 1 ~

    The following command adds two custom colors numbered 21 and 22.
>
      :hi HiColor21 ctermfg=20  ctermbg=159 guifg=#0000df guibg=#afffff
      :hi HiColor22 ctermfg=228 ctermbg=129 guifg=#ffff87 guibg=#af00ff
<
    Now move the cursor to any word, and then input the number `21` and |HiSet|
    key. Does it work? If you press |HiSet| key again, the next color will be set.
    You can try different values to change the color, and see the result
    instantly. You can store colors in the configuration file using this format.

The highlighting colors are selected in order, or can be picked with the number.
If the next color is not defined, the first one is selected.

`HiOneTime` is the color of `ONE TIME HIGHLIGHT`
`HiFollow`  is the color of `FOLLOWING HIGHLIGHT`
`HiFind`    is the color of `FIND IN FILES HIGHLIGHT`

Example 2 ~

    The following command changes the color of `FIND IN FILES HIGHLIGHT`
>
      :hi HiFind ctermfg=52 ctermbg=182 guifg=#570707 guibg=#e7bfe7
<
------------------------------------------------------------------------------
COMMANDS                                                 *:HI*  *:Hi*  *Hi-Commands*

Highlighter commands begin with `Hi` or `HI`, and are combined with the following
commands using optional spaces.

1.Commands with no default key mapping ~

 :Hi ~
    Print plugin version
                                                                         *:Hi==*
 :Hi == ~
    Synchronize highlighting of all windows in the current |tab-page|
                                                                         *:Hi=*
 :Hi = ~
    Switch back to the default single window highlighting mode
                                                                         *:Hi=!*
 :Hi =! ~
    Toggle `SYNC MODE` of the current |tab-page|
                                                 *:Hi<>*  *:Hi<cword>*  *:Hi<cWORD>*
 :Hi <>  <cword>  <cWORD> ~
    Set word matching mode in `FOLLOWING HIGHLIGHT`
    <>  toggle between two modes
                                                        *:Hi/next*  *:Hi/previous*
 :Hi /next ~
 :Hi /previous ~
    Jump to the next | previous item in the `Find` list
    It will be convenient to use shortcut keys to these commands to easily
    navigate the search list. For example, to map '-' and '_' keys in normal
    mode: >
      :nn <silent>-  :<C-U> Hi/next<CR>
      :nn <silent>_  :<C-U> Hi/previous<CR>
<                                                          *:Hi/older*  *:Hi/newer*
 :Hi /older ~
 :Hi /newer ~
    Go to older | newer `Find` list in history
    It would also be convenient to map these commands somewhere.
    To map `f <Left>` and `f <Right>` keys in normal mode:
>
      :nn f<Left>    :<C-U> Hi/older<CR>
      :nn f<Right>   :<C-U> Hi/newer<CR>
<                                                           *:Hi/open*  *:Hi/close*
 :Hi /open ~
 :Hi /close ~
    Open | Close `Find` window
                                                                         *:Hi//*
 :Hi // ~
    Clear highlights of the `Find` result
                                                            *:Hi:save*  *:Hi:load*
 :Hi :save ~
 :Hi :load ~
    Save | Load highlights of the current window to/from the user configurable
    |HiKeywords| directory or relative path
                                                                         *:Hi:ls*
 :Hi :ls ~
    Open the |HiKeywords| directory using |netrw| to browse and manage the list of
    highlight files
                                                                   *:Hi:default*
 :Hi :default ~
    Load the plugin default colors

2.Commands with default key mappings ~
                                                                          *:Hi+*
 :Hi +  +x ~
    |HiSet| key function in normal mode (+), visual mode (+x)
    Set highlight of the word under the cursor
                                                                          *:Hi-*
 :Hi -  -x~
    |HiErase| key function in normal mode (-), visual mode (-x)
    Erase highlight of the word or pattern, or set `ONE TIME HIGHLIGHT`

 :Hi >> ~
    Set `FOLLOWING HIGHLIGHT` mode
                                                                     *:Hi:clear*
 :Hi :clear ~
    |HiClear| key function
    Clear all highlights in the current window
                                                                      *:Hi/Find*
 :Hi/Find ~
    `FIND IN FILES` command prompt activated by |HiFind| key in normal and
    visual mode

------------------------------------------------------------------------------
OPTIONS                                                            *Hi-Options*
                                                                    *HiMapKeys*
|HiMapKeys| lets the plugin map default keys on loading.

    Default: 1 (enable)
    Values:  0, 1
                                                                    *HiFindTool*
|HiFindTool| In this variable, you can set your preferred search tool and options
    to run when using `FIND IN FILES` function. For example,
    "grep": >
          let HiFindTool = 'grep -H -EnrI --exclude-dir=.git'
<    "ag": >
          let HiFindTool = 'ag --nocolor --noheading --column --nobreak'
<    "rg": >
          let HiFindTool = 'rg -H --color=never --no-heading --column --smart-case'
<    "ack": >
          let HiFindTool = 'ack -H --nocolor --noheading --column --smart-case'
<    "sift:" >
          let HiFindTool = 'sift --no-color --line-number --column --binary-skip --git --smart-case'
<    "ggrep": >
          let HiFindTool = 'ggrep -H -EnrI --exclude-dir=.git'
<    "git grep": >
          let HiFindTool = 'git grep -EnI --no-color --column'
<                                                                 *HiFindHistory*
|HiFindHistory| specifies the number of most recently used `FIND IN FILES` lists to
    keep in memory. You can use |Hi/older| and |Hi/newer| commands to navigate the
    list.

    Default: 5
    Values:  2 ~ 10
                                                                    *HiKeywords*
|HiKeywords| specifies a directory in which current highlights, optional keywords
    for `FOLLOWING HIGHLIGHT`, and additional options for search tools can be
    stored. The default setting is:
>
        let HiKeywords = '$HOME/.vim/after/vim-highlighter'
<
    The |Hi:ls| command opens |netrw| window for browsing and managing files in the
    directory.

    The optional Keyword files can be used in `FOLLOWING HIGHLIGHT` mode to reduce
    highlight changes to frequently used keywords. If needed, you can define more
    keywords and save it as a text file using the 'filetype' as the filename.

    Additional search tools options for `FIND IN FILES` can also be stored in the
    directory.
                                                                 *HiOneTimeWait*
|HiOneTimeWait| defines the wait time before turning off the highlights after the
    cursor stopped in `ONE TIME HIGHLIGHT` mode.

    Default: 260 (ms)
    Values:  0 ~ 320
                                                                  *HiFollowWait*
|HiFollowWait| defines the wait time before moving the highlights to the cursor
    position after the cursor stopped in `FOLLOWING HIGHLIGHT` mode.

    Default: 320 (ms)
    Values:  260 ~ 520

STATUS VARIABLES ~
                                                                   *HiFindLines*
|HiFindLines|  `read-only`
    This variable represents the number of lines found as a result of `FIND`
    `IN FILES` operation, which can be used to check if an item exists.

------------------------------------------------------------------------------
REFERENCE                                                         *Hi-Reference*

    This tool will be helpful when editing colors.

    `xterm-color-table.vim` (https://github.com/guns/xterm-color-table.vim)

------------------------------------------------------------------------------
ISSUES                                                               *Hi-Issues*

If you have any issues that need fixing, comments or new features you would
like to add, please feel free to open an issue.


------------------------------------------------------------------------------
LOG                                                                     *Hi-Log*

1.33~
    Improve "Find" results navigation
      - center the cursor line when switching buffers
      - window resizing
      - fixed handling option '--'
1.32~
    Improve "Find" results navigation
      - jumping to the first item using number key combination
1.31~
    Improve usability
      - "Hi" command <Tab> completion
      - "Following Highlight" turning off operation
      - grep default options
1.30~
    Improve "Find" results navigation
      - preserving the index when switching lists
      - optional count for Hi/next, Hi/previous
      - focus switching after Hi/older commands
1.29~
    Improve usability
      - relative path support for saving and loading highlights
      - rename default.hl to _.hl
      - runtime HiFindTool configuration
1.28~
    Add command mode <Tab> key completion
      - grep long options, directory and file names
    Improve ColorScheme change handling
1.27~
    Fix - incorrect window resizing, grep default options, --smart-case matching
1.26~
    Improve "Find in Files Highlight"
      - added "clear highlights" command
      - fixed default options for grep
      - fixed --smart-case matching
1.25~
    Add commands - save, load highlights
    Improve "Find" window split location
1.24~
    Fix - correct focus switching to the "Find" window
1.23~
    Fix - Jump to File
1.22~
    Improve focus switching to the "Find" window
1.21~
    Improve options
      - fixed "Find" window rotation
      - added "HiKeywords" option for user configurable keywords
      - added "Sync Mode" toggle command
1.20~
    Add "Sync Mode"
    Improve grep output list
1.19~
    Add "Following Highlight" <cWORD> matching mode
      - extended matching to windows in the current tab
    Adjust "HiFind" match priority
      - added restoring HiFind color on color scheme change
    Add user keywords options for search tools
1.18~
    Support multiple -e --regexp option
      - fixed empty expression input
      - added git-grep options
    Highlight a single line using visual selection
1.17~
    Improve "Find in Files Highlight" input handling
      - added --fixed-strings  --literal option
1.16~
    Add "Find in Files Highlight" --smart-case option
1.15~
    Add "Find in Files Highlight"
      - "very magic" style regex syntax
      - asynchronous search
      - airline compatible
    Improve "One Time Highlight" to show all matches in the current tab
    Improve erasing highlight using visual selection
1.14~
    Improve highlight on the hlsearch
1.13~
    Add "Following Highlight" default keywords
1.1~
    Upgrade "Following Highlight" with well-known keywords.
    Fix buffer switching error
1.0~
    Initial upload

------------------------------------------------------------------------------
Vim:tw=80:ts=4:ft=help:nowrap:norl
